library(tidyverse)
library(maps)
library(ggthemes)
library(mapproj)
library(gridExtra)

opioids <- read_csv("data/opioids.csv")
prescribers <- read_csv("data/prescriber-info.csv")
overdoses <- read_csv("data/overdoses.csv")
cms14 <- read_csv("data/Medicare_Provider_Utilization_and_Payment_Data__Part_D_Prescriber_Summary_Table_CY2014.csv")
cms13 <- read_csv("data/Medicare_Provider_Utilization_and_Payment_Data__Part_D_Prescriber_Summary_Table_CY2013.csv")
cms15 <- read_csv("data/Medicare_Provider_Utilization_and_Payment_Data__Part_D_Prescriber_Summary_Table_CY2015.csv")
cms16 <- read_csv("data/Medicare_Provider_Utilization_and_Payment_Data__Part_D_Prescriber_Summary_Table_CY2016.csv")
overdoses_combined <- read_csv("data/NCHS_-_Drug_Poisoning_Mortality_by_State__United_States.csv")


not_states <- list('AA','GU','AE','ZZ')
prescribers <- prescribers[!(prescribers$State %in% not_states), ]


overdoses <- overdoses %>% 
  mutate(Percentage = (Deaths/Population)*100)


#filter for only opioid prescribers and group by state to get a count
state_counts <- prescribers %>%
  filter(Opioid.Prescriber == 1) %>%
  group_by(State) %>% 
  summarise(count_npi = n_distinct(NPI)) %>% 
  arrange(desc(count_npi))


# create a list of NPIs from original dataset to subset each dataframe by
npi_list = c(prescribers$NPI)

cms13 <- cms13 %>% 
  mutate(year = 2013)

cms14 <- cms14 %>% 
  mutate(year = 2014)

cms15 <- cms15 %>% 
  mutate(year = 2015)

cms16 <- cms16 %>% 
  mutate(year = 2016)

# bind all dataframes together to one combined dataframe
cms_combined <- bind_rows(cms13,cms14,cms15,cms16)

# remove unnecessary state codes (AA, GU, AE, ZZ)
cms_combined <- cms_combined[!(cms_combined$nppes_provider_state %in% not_states), ]

# change orthopaedic to orthopedic
cms_combined$specialty_description <- gsub("Orthopaedic Surgery", "Orthopedic Surgery",
                                           cms_combined$specialty_description)

cms_combined$specialty_description <- gsub("Certified Registered Nurse Anesthetist (CRNA)",
                                           "CRNA", cms_combined$specialty_description)

cms_providers <- cms_combined %>% 
  filter(npi %in% npi_list)

cms_providers <- cms_providers %>% 
  filter(specialty_description != "Behavioral Analyst")

cms_opioid_providers <- cms_providers %>%
  filter(!is.na(opioid_claim_count))

cms_opioid_providers <- cms_providers %>% 
  filter(opioid_claim_count != 0)

saveRDS(cms_opioid_providers, "data/opioid_providers_table.rds")

# list of NPIs used in our analysis
providers_list <- c(cms_opioid_providers$npi)

# specialties dataframe
specialties_totals <- cms_opioid_providers %>% 
  group_by(specialty_description) %>% 
  summarize(opioid_claims = sum(opioid_claim_count, na.rm = TRUE),
            total_claims = sum(total_claim_count, na.rm = TRUE)) %>% 
  ungroup() %>% 
  select(specialty_description, opioid_claims, total_claims)

# create a new column for prescription rate
specialties_totals <- specialties_totals %>% 
  mutate(opioid_prescription_rate = (opioid_claims/total_claims)*100)

# top 5 specialties by opioid claims, regardless of prescription rate
top5_specs_counts_list <- list("Family Practice", "Internal Medicine", "Nurse Practitioner",
                          "Physician Assistant", "Orthopedic Surgery")

# top 5 specialties by rate, with den > 10,000,000 total claims
top5_specs_rates_list <- list("Pain Management", "Anesthesiology",
                         "Interventional Pain Management", "Physical Medicine and Rehabilitation", 
                         "Orthopedic Surgery")

# filter specialties_totals by top 5 by claims
top5_specs_counts <- specialties_totals %>% 
  filter(specialty_description %in% top5_specs_counts_list)

# create a new column to divide opioid claims by a million for plotting
top5_specs_counts_millions <- top5_specs_counts %>%
  mutate(opioid_claim_count = opioid_claims/1000000)

# filter specialties_totals by top 5 by rates
top5_specs_rates <- specialties_totals %>% 
  filter(specialty_description %in% top5_specs_rates_list)


# plot top 5 specialties by opioid claims
ggplot(top5_specs_counts_millions, aes(x=reorder(specialty_description, -opioid_claim_count),
                                       y=opioid_claim_count)) +
  geom_bar(stat = "identity") +
  labs(x="Specialty", y="Opioid Claims (Millions)",
       title="Top Five Specialties by Opioid Claims",
       subtitle = "United States, 2013-2016") +
  theme(axis.text.x = element_text(angle = 60, hjust = 1, vjust = 1))

# plot top 5 specialties by opioid prescription rate
ggplot(top5_specs_rates, aes(x=reorder(specialty_description, -opioid_prescription_rate),
                             y=opioid_prescription_rate)) +
  geom_bar(stat = "identity") +
  labs(x="Specialty", y="Opioid Prescription Rate", 
       title="Opioid Prescription Rate by Specialty", subtitle="United States, 2013-2016") +
  theme(axis.text.x = element_text(angle = 60, hjust = 1, vjust = 1))

# create a dataframe of specialties over time
specialties_yearly <- cms_opioid_providers %>% 
  group_by(specialty_description, year) %>% 
  summarize(opioid_claims = sum(opioid_claim_count, na.rm = TRUE),
            total_claims = sum(total_claim_count, na.rm = TRUE)) %>% 
  ungroup() %>% 
  select(specialty_description, year, opioid_claims, total_claims)

specialties_yearly <- specialties_yearly %>% 
  mutate(opioid_prescription_rate = (opioid_claims/total_claims)*100)

saveRDS(specialties_yearly, "data/specialties_year.rds")


top5_specs_year <- specialties_yearly %>% 
  filter(specialty_description %in% top5_specs_rates_list)

top5_specs_year <- top5_specs_year %>% 
  mutate(opioid_claims = opioid_claims/1000000,
         total_claims = total_claims/1000000)

saveRDS(top5_specs_year, "data/top5_specs_year.rds")

top5_counts_year <- specialties_yearly %>% 
  filter(specialty_description %in% top5_specs_counts_list)

top5_counts_year <- top5_counts_year %>% 
  mutate(opioid_claims = opioid_claims/1000000,
         total_claims = total_claims/1000000)

top5_specs_box_data <- cms_opioid_providers %>% 
  filter(specialty_description %in% top5_specs_rates_list)

top5_counts_box_data <- cms_opioid_providers %>% 
  filter(specialty_description %in% top5_specs_counts_list)

# boxplot of opioid claims by specialty
ggplot(top5_counts_box_data, aes(x=reorder(specialty_description, -opioid_prescriber_rate),
                                          y=opioid_prescriber_rate)) +
  facet_wrap(ncol = 2, ~year) +
  geom_boxplot() +
  geom_point(aes(color = specialty_description),
             position=position_jitter(width = 0.2), alpha = 0.3) +
  theme_bw() +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank()) +
  scale_color_discrete(name = "Specialty", breaks = c("Family Practice", "Internal Medicine", 
                                                      "Nurse Practitioner",
                                                      "Physician Assistant", 
                                                      "Orthopedic Surgery")) +
  labs(y="Opioid Prescription Rate", title="Opioid Prescription Rate by Specialty")
  

# boxplot of opioid prescription rate by specialty
ggplot(top5_specs_box_data, aes(x=reorder(specialty_description, -opioid_prescriber_rate),
                            y=opioid_prescriber_rate)) +
  facet_wrap(ncol = 2, ~year) +
  geom_boxplot() +
  geom_point(aes(color = specialty_description),
             position=position_jitter(width = 0.2), alpha = 0.3) +
  theme_bw() +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank()) +
  scale_color_discrete(name = "Specialty", breaks = c("Pain Management",
                                                      "Anesthesiology",
                                                      "Interventional Pain Management", 
                                                      "Orthopedic Surgery", 
                                                      "Physical Medicine and Rehabilitation")) +
  labs(y="Opioid Prescription Rate", title="Opioid Prescription Rate by Specialty")



# line plot of opioid prescription counts by specialty for top 5 in opioid claims
line_counts_a <- ggplot(top5_counts_year, aes(x=year, y=opioid_claims, color = specialty_description)) +
  geom_line() +
  theme_bw() +
  theme(axis.title.x = element_blank()) +
  scale_color_discrete(name = "Specialty", breaks = c("Family Practice", "Internal Medicine", 
                                                      "Nurse Practitioner",
                                                      "Physician Assistant", 
                                                      "Orthopedic Surgery")) +
  labs(y="Opioid Claims (Millions)", title="Number of Opioid Claims")

# line plot of opioid prescription rate by specialty for top 5 in opioid claims
prescription_rates_a <- ggplot(top5_counts_year, aes(x=year, y=opioid_prescription_rate, color = specialty_description)) +
  geom_line() +
  theme_bw() +
  scale_color_discrete(name = "Specialty", breaks = c("Family Practice", "Internal Medicine", 
                                                      "Nurse Practitioner",
                                                      "Physician Assistant", 
                                                      "Orthopedic Surgery")) +
  labs(x="Year", y="Prescription Rate", title="Opioid Prescription Rate")

# plot both "A" plots together
grid.arrange(line_counts_a, prescription_rates_a, nrow = 3)


# line plot of opioid claims by specialty for top 5 in prescription rate
line_counts_b <- ggplot(top5_specs_year, aes(x=year, y=opioid_claims, color = specialty_description)) +
  geom_line() +
  theme_bw() +
  theme(axis.title.x = element_blank()) +
  scale_color_discrete(name = "Specialty", breaks = c("Interventional Pain Management",
                                                      "Pain Management",
                                                      "Anesthesiology", 
                                                      "Orthopedic Surgery", 
                                                      "Physical Medicine and Rehabilitation")) +
  labs(y="Opioid Claims (Millions)", title="Number of Opioid Claims")


# line plot of opioid prescription rate by specialty for top 5 in prescription rate
prescription_rates_b <- ggplot(top5_specs_year, aes(x=year, y=opioid_prescription_rate, color = specialty_description)) +
  geom_line() +
  theme_bw() +
  scale_color_discrete(name = "Specialty", breaks = c("Interventional Pain Management",
                                                      "Pain Management",
                                                      "Anesthesiology", 
                                                      "Orthopedic Surgery", 
                                                      "Physical Medicine and Rehabilitation")) +
  labs(x="Year", y="Opioid Prescription Rate", title="Opioid Prescription Rate by Specialty")

# plot both "B" plots together
grid.arrange(line_counts_b, prescription_rates_b, nrow = 2)


# counts by state, by year
cms_state_providers <- cms_providers %>% 
  group_by(nppes_provider_state, year) %>% 
  summarize(count_npi = n_distinct(npi),
            total_beneficiaries = sum(bene_count, na.rm = TRUE),
            total_claims = sum(total_claim_count, na.rm = TRUE),
            opioid_beneficiaries = sum(opioid_bene_count, na.rm = TRUE),
            opioid_claims = sum(opioid_claim_count, na.rm = TRUE),
            drug_supply = sum(total_day_supply, na.rm = TRUE),
            drug_cost = sum(total_drug_cost, na.rm = TRUE),
            opioid_supply = sum(opioid_day_supply, na.rm = TRUE),
            opioid_cost = sum(opioid_drug_cost, na.rm = TRUE),
            er_beneficiaries = sum(er_opioid_bene_count, na.rm = TRUE),
            er_claims = sum(er_opioid_claim_count, na.rm = TRUE),
            er_supply = sum(er_opioid_day_supply, na.rm = TRUE),
            er_cost = sum(er_opioid_drug_cost, na.rm = TRUE),
            total_30_day_fills = sum(total_30_day_fill_count, na.rm = TRUE),
            female = sum(beneficiary_female_count, na.rm = TRUE),
            male = sum(beneficiary_male_count, na.rm = TRUE),
            white = sum(beneficiary_race_white_count, na.rm = TRUE),
            black = sum(beneficiary_race_black_count, na.rm = TRUE),
            asian = sum(beneficiary_race_asian_pi_count, na.rm = TRUE),
            hispanic = sum(beneficiary_race_hispanic_count, na.rm = TRUE),
            native_indian = sum(beneficiary_race_nat_ind_count, na.rm = TRUE),
            other_race = sum(beneficiary_race_other_count, na.rm = TRUE),
            average_age = mean(average_age_of_beneficiaries, na.rm = TRUE)) %>% 
  ungroup() %>% 
  select(nppes_provider_state, year, count_npi, total_beneficiaries, total_claims,
         opioid_beneficiaries, opioid_claims, drug_supply, drug_cost, opioid_supply, opioid_cost,
         er_beneficiaries, er_claims, er_supply, er_cost, total_30_day_fills, female, male,
         white, black, asian, hispanic, native_indian, other_race, average_age)


cms_state_providers <- cms_state_providers %>% 
  mutate(opioid_prescription_rate = (opioid_claims/total_claims)*100)


# create a state lookup dataframe
state_lookup <- overdoses %>%
  select(State, Abbrev)

cms_state_providers <- cms_state_providers %>% 
  inner_join(state_lookup, by = c("nppes_provider_state" = "Abbrev"))

saveRDS(cms_state_providers, "data/cms_state_providers.rds")

cms_state_providers_specs <- cms_providers %>% 
  group_by(nppes_provider_state, specialty_description, year) %>% 
  summarize(count_npi = n_distinct(npi),
            total_beneficiaries = sum(bene_count, na.rm = TRUE),
            total_claims = sum(total_claim_count, na.rm = TRUE),
            opioid_beneficiaries = sum(opioid_bene_count, na.rm = TRUE),
            opioid_claims = sum(opioid_claim_count, na.rm = TRUE),
            drug_supply = sum(total_day_supply, na.rm = TRUE),
            drug_cost = sum(total_drug_cost, na.rm = TRUE),
            opioid_supply = sum(opioid_day_supply, na.rm = TRUE),
            opioid_cost = sum(opioid_drug_cost, na.rm = TRUE),
            er_beneficiaries = sum(er_opioid_bene_count, na.rm = TRUE),
            er_claims = sum(er_opioid_claim_count, na.rm = TRUE),
            er_supply = sum(er_opioid_day_supply, na.rm = TRUE),
            er_cost = sum(er_opioid_drug_cost, na.rm = TRUE),
            total_30_day_fills = sum(total_30_day_fill_count, na.rm = TRUE),
            female = sum(beneficiary_female_count, na.rm = TRUE),
            male = sum(beneficiary_male_count, na.rm = TRUE),
            white = sum(beneficiary_race_white_count, na.rm = TRUE),
            black = sum(beneficiary_race_black_count, na.rm = TRUE),
            asian = sum(beneficiary_race_asian_pi_count, na.rm = TRUE),
            hispanic = sum(beneficiary_race_hispanic_count, na.rm = TRUE),
            native_indian = sum(beneficiary_race_nat_ind_count, na.rm = TRUE),
            other_race = sum(beneficiary_race_other_count, na.rm = TRUE),
            average_age = mean(average_age_of_beneficiaries, na.rm = TRUE)) %>% 
  ungroup() %>% 
  select(nppes_provider_state, specialty_description, year, count_npi, total_beneficiaries, total_claims,
         opioid_beneficiaries, opioid_claims, drug_supply, drug_cost, opioid_supply, opioid_cost,
         er_beneficiaries, er_claims, er_supply, er_cost, total_30_day_fills, female, male,
         white, black, asian, hispanic, native_indian, other_race, average_age)

cms_state_providers_specs <- cms_state_providers_specs %>% 
  mutate(opioid_prescription_rate = (opioid_claims/total_claims)*100)

saveRDS(cms_state_providers_specs, "data/cms_state_providers_specs.rds")


# map the opioid prescription rate over time by state
united_states_map <- map_data("state")
cms_state_providers$State <- tolower(cms_state_providers$State)
prescription_rate_map <- inner_join(united_states_map, cms_state_providers, by = c("region" = "State"))

saveRDS(prescription_rate_map, "data/prescription_rate_map.rds")

map0 <- ggplot(prescription_rate_map, aes(x = long, y = lat, group = group,
                                          fill = opioid_prescription_rate))

map1 <- map0 + geom_polygon(color = "gray90", size = 0.05) +
  coord_map(projection = "albers", lat0 = 39, lat1 = 45)

map2 <- map1 + scale_fill_viridis_c(option = "plasma", direction = -1)

map2 + theme_map() + facet_wrap(~ year, ncol = 2) +
  theme(legend.position = "bottom",
        strip.background = element_blank(),
        plot.title = element_text(hjust = 0.5)) +
  labs(fill = "Opioid Prescription Rate",
       title = "Opioid Prescription Rate Over Time")


